#!/bin/bash

. k8s-read-config

echo "Deploying ConfigMaps"
for index in "${!CONFIGMAP_FILES[@]}"; do
  CONFIGMAP=${CONFIGMAPS[$index]}
  CONFIGMAP_FILE=${CONFIGMAP_FILES[$index]}
  kubectl get configmap $CONFIGMAP
  if [ $? -ne 0 ]
  then
   echo "Configmap ${CONFIGMAP} does not exist yet, creating it"
   kubectl create -f ${CONFIGMAP_FILE} --record
   if [ $? -ne 0 ]
   then
     echo "Create failed, aborting"
     exit 1
   fi
  fi
  echo "Updating ${CONFIGMAP_FILE}"
  kubectl apply -f ${CONFIGMAP_FILE}
  if [ $? -ne 0 ]
  then
    echo "Apply failed, aborting"
    exit 1
  fi
done
echo "Done deploying ConfigMaps"

echo "Deploying Secrets"
for index in "${!SECRET_FILES[@]}"
do
  SECRET=${SECRETS[$index]}
  SECRET_FILE=${SECRET_FILES[$index]}
  kubectl get secret $SECRET
  if [ $? -ne 0 ]
  then
   echo "Secret ${SECRET} does not exist yet, creating it"
   kubectl create -f ${SECRET_FILE} --record
   if [ $? -ne 0 ]
   then
     echo "Create failed, aborting"
     exit 1
   fi
  fi
  echo "Updating ${SECRET_FILE}"
  kubectl apply -f ${SECRET_FILE}
  if [ $? -ne 0 ]
  then
    echo "Apply failed, aborting"
    exit 1
  fi
done
echo "Done deploying Secrets"

echo "Deploying Services"
for index in "${!SERVICE_FILES[@]}"
do
  SERVICE=${SERVICES[$index]}
  SERVICE_FILE=${SERVICE_FILES[$index]}
  echo $SERVICE
  kubectl get service ${SERVICE} &>/dev/null
  if [ $? -ne 0 ]
  then
   echo "Service ${SERVICE} does not exist yet, creating it"
   kubectl create -f ${SERVICE_FILE} --record
   if [ $? -ne 0 ]
   then
     echo "Create failed, aborting"
     exit 1
   fi
  else
   echo "Service ${SERVICE} already exists"
  fi
done
echo "Done deploying Services"

echo "Deploying Deployments"
for index in "${!DEPLOYMENT_FILES[@]}"
do
  DEPLOYMENT=${DEPLOYMENTS[$index]}
  DEPLOYMENT_FILE=${DEPLOYMENT_FILES[$index]}
  kubectl get deployment ${DEPLOYMENT} &>/dev/null
  if [ $? -ne 0 ]
  then
   echo "Deployment ${DEPLOYMENT} does not exist yet, creating it"
   kubectl create -f ${DEPLOYMENT_FILE} --record
   if [ $? -ne 0 ]
   then
     echo "Create failed, aborting"
     exit 1
   fi
  fi
  if [ ! -n $CI_SHA1 ]
  then
    echo "Updating image tag from latest to ${CI_SHA1} for ${DEPLOYMENT_FILE}"
    sed 's/:latest/':${CI_SHA1}'/g;' ${DEPLOYMENT_FILE} > ${DEPLOYMENT_FILE}-${CI_SHA1}
    echo "Updating ${DEPLOYMENT_FILE}-${CI_SHA1}"
    DEPLOYMENT_FILE=${DEPLOYMENT_FILE}-${CI_SHA1}
  fi
  kubectl apply -f ${DEPLOYMENT_FILE}
  if [ $? -ne 0 ]
  then
    echo "Apply failed, aborting"
    exit 1
  fi

done
echo "Done deploying Deployments"
echo ""

echo "Verifying successful deployments"
for i in "${DEPLOYMENTS[@]}"
do
  echo "Checking deployment for $i"
  timeout.sh -t ${DEPLOY_TIMEOUT} verify-deployment $i
  result=$?
  if [ "$result" == "143" ] ; then
      echo "------- DEPLOYMENT TIMEOUT FAIL --------"
      exit 1
  fi
  if [ "$result" == "0" ] ; then
    echo "DEPLOY SUCCESFULL"
  else
    echo "DEPLOY FAILED"
    exit $result
  fi
done

echo "All objects created"
echo ""
